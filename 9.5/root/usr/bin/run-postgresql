#!/bin/bash

export ENABLE_REPLICATION=${ENABLE_REPLICATION:-false}

#set -eu
export_vars=$(cgroup-limits) ; export $export_vars

source "${CONTAINER_SCRIPTS_PATH}/common.sh"

set_pgdata
check_env_vars
generate_passwd_file
generate_postgresql_config

if [ ! -f "$PGDATA/postgresql.conf" ]; then
  initialize_database
  NEED_TO_CREATE_USERS=yes
fi

pg_ctl -w start -o "-h ''"
if [ "${NEED_TO_CREATE_USERS:-}" == "yes" ]; then
  create_users

fi


if [ "${NEED_TO_CREATE_POSTGIS:-}" == "yes" ]; then
	

	if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='${POSTGRESQL_DATABASE}'" )" = '1' ]
	then
	    echo "Database already exists"
	else
	    echo "Database does not exist"
	    create_database
	  	create_rw_database_role
	  	create_ro_database_role
	fi

	SCHEMA=${POSTGRESQL_USER}
	if [ "$( psql -tAc "SELECT schema_name FROM information_schema.schemata WHERE schema_name = '${SCHEMA}'" )" = ${SCHEMA} ]
	then
		 echo "Schema already exists"
	else
	  	create_schema
	  	create_ro_schema_role
	  	create_rw_schema_role

	  	ROLE="role_${SCHEMA}_rw"
  		grant_role_to_user
	fi 	

	SCHEMA="extensions"
	if [ "$( psql -tAc "SELECT schema_name FROM information_schema.schemata WHERE schema_name = '${SCHEMA}'" )" = ${SCHEMA} ]
	then
		 echo "Schema already exists"
	else
	  	create_schema
		create_ro_schema_role
		create_rw_schema_role
		install_extensions
	fi 		
fi

set_passwords
pg_ctl stop

unset_env_vars
exec postgres "$@"
